# Select directory containing the .txt files
datadir <- rstudioapi::selectDirectory()
# Extract the experiment number for use later (useful when combining experiments)
Experiment_number<- basename(datadir)
# Search all .txt files in the chosen directory
my_files <- list.files(datadir, pattern='*stats.txt', full.names = TRUE, recursive = TRUE)
my_files_names <- list.files(datadir, pattern='*stats.txt', recursive = TRUE)
# Cleaning the file names for use later
my_files_names <- gsub("/TrackingPackage/mtTracks/","_", my_files_names)
# Creating vectors to store data in
my_num_growths <- vector(mode = "numeric", length = length(my_files))
my_growth_speed <- vector(mode = "numeric", length = length(my_files))
my_growth_lifetime <- vector(mode = "numeric", length = length(my_files))
my_growth_length <- vector(mode = "numeric", length = length(my_files))
headings <- c('growth_speed', 'number_of_growths', 'growth_lifetime', 'growth_length')
df1 <- matrix(0, length(my_files), length(headings))
df1 <- as.data.frame(df1)
colnames(df1) <- headings
extract_data <- function(dataframe, file_name, row_num){
my_file <- readLines(file_name)
speed_line <- grep(pattern = "growth_speed_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_num_line <- grep(pattern = "nGrowths", x = my_file, value = TRUE, fixed = TRUE)
growth_lifetime_line <- grep(pattern = "growth_lifetime_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_length_line <- grep(pattern = "growth_length_mean", x = my_file, value = TRUE, fixed = TRUE)
dataframe$growth_speed[row_num] <- gsub("growth_speed_mean","", speed_line)
dataframe$number_of_growths[row_num] <- gsub("nGrowths","", growth_num_line)
#dataframe$growth_lifetime[row_num] <- gsub("growth_lifetime_mean","", growth_lifetime_line)
dataframe$growth_length[row_num] <- gsub("growth_length_mean","", growth_length_line)
return(dataframe)
}
for (i in 1:length(my_files)){
file_name <- my_files[i]
df1 <- extract_data(df1, file_name, i)
}
# function to get line of interest and extract the data
get_growth_speed <- function(my_filename){
# import data
myFile <- readLines(my_filename)
# get the line with the value we want (as string)
myLine <- grep(pattern = "growth_speed_mean", x = myFile, value = TRUE)
# get rid of text we don't want and convert to numeric
myValue <- as.numeric(gsub("growth_speed_mean","", myLine))
return(myValue)
}
grep(pattern = "growth_lifetime_mean_", x = test, value = TRUE, fixed = TRUE)
setwd("~/Documents/GitHub/Image_analysis_projects/Microtubule_tracking")
# Select directory containing the .txt files
datadir <- rstudioapi::selectDirectory()
# Extract the experiment number for use later (useful when combining experiments)
Experiment_number<- basename(datadir)
# Search all .txt files in the chosen directory
my_files <- list.files(datadir, pattern='*stats.txt', full.names = TRUE, recursive = TRUE)
my_files_names <- list.files(datadir, pattern='*stats.txt', recursive = TRUE)
# Cleaning the file names for use later
my_files_names <- gsub("/TrackingPackage/mtTracks/","_", my_files_names)
# Make a dataframe
headings <- c('growth_speed', 'number_of_growths', 'growth_lifetime', 'growth_length')
df1 <- matrix(0, length(my_files), length(headings))
df1 <- as.data.frame(df1)
colnames(df1) <- headings
extract_data <- function(dataframe, file_name, row_num){
my_file <- readLines(file_name)
speed_line <- grep(pattern = "growth_speed_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_num_line <- grep(pattern = "nGrowths", x = my_file, value = TRUE, fixed = TRUE)
growth_lifetime_line <- grep(pattern = "growth_lifetime_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_length_line <- grep(pattern = "growth_length_mean", x = my_file, value = TRUE, fixed = TRUE)
dataframe$growth_speed[row_num] <- gsub("growth_speed_mean_IncludeAllPause","", speed_line)
dataframe$number_of_growths[row_num] <- gsub("nGrowths","", growth_num_line)
dataframe$growth_lifetime[row_num] <- gsub("growth_lifetime_mean_IncludeAllPause","", growth_lifetime_line)
dataframe$growth_length[row_num] <- gsub("growth_length_mean","", growth_length_line)
return(dataframe)
}
for (i in 1:length(my_files)){
file_name <- my_files[i]
df1 <- extract_data(df1, file_name, i)
}
extract_data <- function(dataframe, file_name, row_num){
my_file <- readLines(file_name)
speed_line <- grep(pattern = "growth_speed_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_num_line <- grep(pattern = "nGrowths", x = my_file, value = TRUE, fixed = TRUE)
growth_lifetime_line <- grep(pattern = "growth_lifetime_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_length_line <- grep(pattern = "growth_length_mean", x = my_file, value = TRUE, fixed = TRUE)
dataframe$growth_speed[row_num] <- gsub("growth_speed_mean_IncludeAllPause","", speed_line)
dataframe$number_of_growths[row_num] <- gsub("nGrowths","", growth_num_line)
dataframe$growth_lifetime[row_num] <- gsub("growth_lifetime_mean_IncludeAllPause","", growth_lifetime_line)
dataframe$growth_length[row_num] <- gsub("growth_length_mean","", growth_length_line)
dataframe$Name_of_file [row_num] <- my_files_names[row_num]
return(dataframe)
}
for (i in 1:length(my_files)){
file_name <- my_files[i]
df1 <- extract_data(df1, file_name, i)
}
class(df1$growth_speed)
?as.numeric
levels(df1)
as.numeric(df1$growth_speed)
# Convert character to numeric
df1$growth_length <- as.numeric(df1$growth_length)
# Convert character to numeric
df1$growth_length <- as.numeric(df1$growth_length)
df1$growth_speed <- as.numeric(df1$growth_speed)
df1$number_of_growths <- as.numeric(df1$number_of_growths)
df1$growth_lifetime <- as.numeric(df1$growth_lifetime)
# Add experiment number to the dataframe
df1$Experiment <- Experiment_number
# Load lookup.csv
look_up_table <- read.table('Data/lookup.csv', header = TRUE, stringsAsFactors = F, sep = ",")
# Load lookup.csv
look_up_table <- read.table('Data/lookup.csv', header = TRUE, stringsAsFactors = F, sep = ",")
# Load lookup.csv
look_up_table <- read.table('Data/lookup.csv', header = TRUE, stringsAsFactors = F, sep = ",")
# function to find partial strings in a column and classify them
add_categories = function(x, patterns, replacements = patterns, fill = NA, ...) {
stopifnot(length(patterns) == length(replacements))
ans = rep_len(as.character(fill), length(x))
empty = seq_along(x)
for(i in seq_along(patterns)) {
greps = grepl(patterns[[i]], x[empty], ...)
ans[empty[greps]] = replacements[[i]]
empty = empty[!greps]
}
return(ans)
}
# add a new column to dataframe where categories are defined by searching original name for partial strings
df1$Category <- add_categories(df1$my_files_names,
look_up_table$Search_name,
look_up_table$Search_category,
"NA", ignore.case = TRUE)
# add a new column to dataframe where categories are defined by searching original name for partial strings
df1$Category <- add_categories(df1$Name_of_file,
look_up_table$Search_name,
look_up_table$Search_category,
"NA", ignore.case = TRUE)
setwd("~/Documents/GitHub/Image_analysis_projects/Microtubule_tracking")
# Select directory containing the .txt files
datadir <- rstudioapi::selectDirectory()
# Extract the experiment number for use later (useful when combining experiments)
Experiment_number<- basename(datadir)
# Search all .txt files in the chosen directory
my_files <- list.files(datadir, pattern='*stats.txt', full.names = TRUE, recursive = TRUE)
my_files_names <- list.files(datadir, pattern='*stats.txt', recursive = TRUE)
# Cleaning the file names for use later
my_files_names <- gsub("/TrackingPackage/mtTracks/","_", my_files_names)
# Make a dataframe to store the extracted data
headings <- c('growth_speed', 'number_of_growths', 'growth_lifetime', 'growth_length', 'Name_of_file')
df1 <- matrix(0, length(my_files), length(headings))
df1 <- as.data.frame(df1)
colnames(df1) <- headings
extract_data <- function(dataframe, file_name, row_num){
my_file <- readLines(file_name)
speed_line <- grep(pattern = "growth_speed_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_num_line <- grep(pattern = "nGrowths", x = my_file, value = TRUE, fixed = TRUE)
growth_lifetime_line <- grep(pattern = "growth_lifetime_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_length_line <- grep(pattern = "growth_length_mean", x = my_file, value = TRUE, fixed = TRUE)
dataframe$growth_speed[row_num] <- gsub("growth_speed_mean_IncludeAllPause","", speed_line)
dataframe$number_of_growths[row_num] <- gsub("nGrowths","", growth_num_line)
dataframe$growth_lifetime[row_num] <- gsub("growth_lifetime_mean_IncludeAllPause","", growth_lifetime_line)
dataframe$growth_length[row_num] <- gsub("growth_length_mean","", growth_length_line)
dataframe$Name_of_file [row_num] <- my_files_names[row_num]
return(dataframe)
}
for (i in 1:length(my_files)){
file_name <- my_files[i]
df1 <- extract_data(df1, file_name, i)
}
# Convert character to numeric
df1$growth_length <- as.numeric(df1$growth_length)
df1$growth_speed <- as.numeric(df1$growth_speed)
df1$number_of_growths <- as.numeric(df1$number_of_growths)
df1$growth_lifetime <- as.numeric(df1$growth_lifetime)
# Add experiment number to the dataframe
df1$Experiment <- Experiment_number
# Load lookup.csv
look_up_table <- read.table('Data/lookup.csv', header = TRUE, stringsAsFactors = F, sep = ",")
# function to find partial strings in a column and classify them
add_categories = function(x, patterns, replacements = patterns, fill = NA, ...) {
stopifnot(length(patterns) == length(replacements))
ans = rep_len(as.character(fill), length(x))
empty = seq_along(x)
for(i in seq_along(patterns)) {
greps = grepl(patterns[[i]], x[empty], ...)
ans[empty[greps]] = replacements[[i]]
empty = empty[!greps]
}
return(ans)
}
# add a new column to dataframe where categories are defined by searching original name for partial strings
df1$Category <- add_categories(df1$Name_of_file,
look_up_table$Search_name,
look_up_table$Search_category,
"NA", ignore.case = TRUE)
# save the dateframe so it can be combined with other experiments in a new script
file_name<- paste0("Output/Dataframe/", Experiment_number, "_dataframe.rds")
saveRDS(df1, file = file_name)
# Select directory containing the .txt files
datadir <- rstudioapi::selectDirectory()
# Extract the experiment number for use later (useful when combining experiments)
Experiment_number<- basename(datadir)
# Search all .txt files in the chosen directory
my_files <- list.files(datadir, pattern='*stats.txt', full.names = TRUE, recursive = TRUE)
my_files_names <- list.files(datadir, pattern='*stats.txt', recursive = TRUE)
# Cleaning the file names for use later
my_files_names <- gsub("/TrackingPackage/mtTracks/","_", my_files_names)
# Make a dataframe to store the extracted data
headings <- c('growth_speed', 'number_of_growths', 'growth_lifetime', 'growth_length', 'Name_of_file')
df1 <- matrix(0, length(my_files), length(headings))
df1 <- as.data.frame(df1)
colnames(df1) <- headings
extract_data <- function(dataframe, file_name, row_num){
my_file <- readLines(file_name)
speed_line <- grep(pattern = "growth_speed_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_num_line <- grep(pattern = "nGrowths", x = my_file, value = TRUE, fixed = TRUE)
growth_lifetime_line <- grep(pattern = "growth_lifetime_mean_", x = my_file, value = TRUE, fixed = TRUE)
growth_length_line <- grep(pattern = "growth_length_mean", x = my_file, value = TRUE, fixed = TRUE)
dataframe$growth_speed[row_num] <- gsub("growth_speed_mean_IncludeAllPause","", speed_line)
dataframe$number_of_growths[row_num] <- gsub("nGrowths","", growth_num_line)
dataframe$growth_lifetime[row_num] <- gsub("growth_lifetime_mean_IncludeAllPause","", growth_lifetime_line)
dataframe$growth_length[row_num] <- gsub("growth_length_mean","", growth_length_line)
dataframe$Name_of_file [row_num] <- my_files_names[row_num]
return(dataframe)
}
for (i in 1:length(my_files)){
file_name <- my_files[i]
df1 <- extract_data(df1, file_name, i)
}
# Convert character to numeric
df1$growth_length <- as.numeric(df1$growth_length)
df1$growth_speed <- as.numeric(df1$growth_speed)
df1$number_of_growths <- as.numeric(df1$number_of_growths)
df1$growth_lifetime <- as.numeric(df1$growth_lifetime)
# Add experiment number to the dataframe
df1$Experiment <- Experiment_number
# Load lookup.csv
look_up_table <- read.table('Data/lookup.csv', header = TRUE, stringsAsFactors = F, sep = ",")
# function to find partial strings in a column and classify them
add_categories = function(x, patterns, replacements = patterns, fill = NA, ...) {
stopifnot(length(patterns) == length(replacements))
ans = rep_len(as.character(fill), length(x))
empty = seq_along(x)
for(i in seq_along(patterns)) {
greps = grepl(patterns[[i]], x[empty], ...)
ans[empty[greps]] = replacements[[i]]
empty = empty[!greps]
}
return(ans)
}
# add a new column to dataframe where categories are defined by searching original name for partial strings
df1$Category <- add_categories(df1$Name_of_file,
look_up_table$Search_name,
look_up_table$Search_category,
"NA", ignore.case = TRUE)
# save the dateframe so it can be combined with other experiments in a new script
file_name<- paste0("Output/Dataframe/", Experiment_number, "_dataframe.rds")
saveRDS(df1, file = file_name)
require(ggplot2)
require(ggbeeswarm)
library(dplyr)
library(multcomp)
library(cowplot)
library(ggpubr)
library(rstatix)
# Load the dataframes (.rds) for each experiment. These should be in Output/Dataframe
datadir <- 'Output/Dataframe'
my_dataframes <- list.files(datadir, pattern = '*.rds', full.names = TRUE)
combined_df <- bind_rows(lapply(my_dataframes, readRDS))
combined_df$Category <- as.factor(combined_df$Category)
# How many cells in each condition?
summary(combined_df$Category)
View(combined_df)
# To plot in the correct order, load in the lookup table
look_up_table <- read.table("Data/lookup.csv", header = TRUE, stringsAsFactors = F, sep = ",")
combined_df$Category <- factor(combined_df$Category, levels = look_up_table$Search_category )
# Find the max value for each parameter. This will be used to set axis limits.
speed_highVal <- ceiling(max(combined_df$growth_speed, na.rm = TRUE))
lifetime_highVal <- ceiling(max(combined_df$growth_lifetime, na.rm = TRUE))
length_highVal <- ceiling(max(combined_df$growth_length, na.rm = TRUE))
nucleation_highVal <- ceiling(max(combined_df$number_of_growths, na.rm = TRUE))
# Generate the plots
# theme_cowplot() removes the grid. Comment this out for classic ggplot appearance.
# function to generate the plots
makeTheScatterPlot <- function(parameter, parameter_units, highVal) {
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 1), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
}
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# Save the plots
# when importing the plot into illustrator save as pdf
ggsave("./Output/Plots/combined_plots.png", plot = combined_plots, dpi = 300)
ggsave("./Output/Plots/combined_plots.pdf", plot = combined_plots, width = 200, height = 200, units = 'mm', useDingbats = FALSE)
# Visualise distribution of data
# Density plot
ggdensity(combined_df$my_growth_lifetime, fill = 'lightgray')
# QQ plot
ggqqplot(combined_df$my_growth_lifetime)
# Visualise distribution of data
# Density plot
ggdensity(combined_df$growth_lifetime, fill = 'lightgray')
# QQ plot
ggqqplot(combined_df$growth_lifetime)
# Use significance test to check normality
# Use the rstatix package which is pipe-friendly. Null hypothesis is norm dist.
combined_df %>% group_by(Category) %>% shapiro_test(growth_lifetime)
# Check for homogeneity of variance across the Categories using levene test, uses rstatix package and is pipe-friendly. Null is equal variances
combined_df %>% levene_test(growth_lifetime ~ Category)
## Independent two-samples t-test, uses rstatix package
stats_result <- combined_df %>% t_test(growth_lifetime ~ Category, ref.group = 'Control', var.equal = TRUE)
View(stats_result)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
# Generate the plots
# theme_cowplot() removes the grid. Comment this out for classic ggplot appearance.
# function to generate the plots
makeTheScatterPlot <- function(parameter, parameter_units, highVal) {
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
}
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# Generate the plots
# theme_cowplot() removes the grid. Comment this out for classic ggplot appearance.
# function to generate the plots
makeTheScatterPlot <- function(parameter, parameter_units, highVal) {
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5, vjust = 0.5), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
}
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5, vjust = 0.8), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
# Generate the plots
# theme_cowplot() removes the grid. Comment this out for classic ggplot appearance.
# function to generate the plots
makeTheScatterPlot <- function(parameter, parameter_units, highVal) {
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5, vjust = 0.8), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
}
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# Generate the plots
# theme_cowplot() removes the grid. Comment this out for classic ggplot appearance.
# function to generate the plots
makeTheScatterPlot <- function(parameter, parameter_units, highVal) {
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5, vjust = 0.7), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
}
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# Generate the plots
# theme_cowplot() removes the grid. Comment this out for classic ggplot appearance.
# function to generate the plots
makeTheScatterPlot <- function(parameter, parameter_units, highVal) {
ggplot(data = combined_df, aes(x = Category, y = parameter, colour = Category)) +
theme_cowplot() +
geom_quasirandom(alpha = 0.5, stroke = 0) +
stat_summary(fun.data = mean_sdl, fun.args = list(mult=1), aes(group = Category)) +
theme(axis.text.x = element_text(angle=90, hjust=1)) +
labs(y = parameter_units, x = NULL) +
theme(axis.text.x = element_text(face= "plain", color= 'black', size=9, angle = 45, hjust = 0.5, vjust = 0.6), axis.text.y = element_text(face = 'plain', color= 'black', size=9)) +
theme(axis.title.y = element_text(size = 10,face='plain',color='black')) +
theme(legend.position = 'none') +
theme(legend.title = element_blank()) +
ylim(0, highVal)
}
# make each of the four plots
p1 <- makeTheScatterPlot(combined_df$growth_speed, "Growth speed (microns/min)", speed_highVal)
p2 <- makeTheScatterPlot(combined_df$growth_lifetime, "Growth lifetime (seconds)", lifetime_highVal)
p3 <- makeTheScatterPlot(combined_df$growth_length, "Growth length (microns)", length_highVal)
p4 <- makeTheScatterPlot(combined_df$number_of_growths, "Nucleation events", nucleation_highVal)
# Arrange the plots
# labels = 'AUTO' generates uppercase labels
# align = 'hv' aligns the plots horizontally and vertically
combined_plots <- plot_grid(p1, p2, p3, p4, labels = 'AUTO', align = 'hv', rel_widths = c(1, 1), rel_heights = c(1,1)) + theme(aspect.ratio=1)
combined_plots
# Save the plots
# when importing the plot into illustrator save as pdf
ggsave("./Output/Plots/combined_plots.png", plot = combined_plots, dpi = 300)
ggsave("./Output/Plots/combined_plots.pdf", plot = combined_plots, width = 200, height = 200, units = 'mm', useDingbats = FALSE)
